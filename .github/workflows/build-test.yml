name: Build & Test

on:
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_TARGET_DIR: ./target
  RUSTFLAGS: "-C target-feature=+crt-static"

jobs:
  build:
    name: Building & testing @bitwarden/sm-action for - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            targets:
              - x86_64-unknown-linux-gnu
            build: |
              cargo build --target x86_64-unknown-linux-gnu --release

          - os: ubuntu-24.04-arm
            targets:
              - aarch64-unknown-linux-gnu
            build: |
              cargo build --target aarch64-unknown-linux-gnu --release

          - os: macos-latest
            targets:
              - x86_64-apple-darwin
              - aarch64-apple-darwin
            build: |
              cargo build --target x86_64-apple-darwin --release
              cargo build --target aarch64-apple-darwin --release

          - os: windows-latest
            targets:
              - x86_64-pc-windows-msvc
              - aarch64-pc-windows-msvc
            build: |
              cargo build --target x86_64-pc-windows-msvc --release
              cargo build --target aarch64-pc-windows-msvc --release

    steps:
      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install Rust
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable
        with:
          toolchain: stable
          targets: ${{ join(matrix.targets, ',') }}

      - name: Cache cargo registry
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache target directory
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-

      - name: Build
        run: ${{ matrix.build }}

      - name: Run tests
        env: # avoid the problems in: https://github.com/rust-lang/rust/issues/78210
          RUSTFLAGS: "-C target-feature=-crt-static"
        run: |
          cargo test --release || { echo "Unit tests failed" >&2; exit 1; }

          test_stdout="$(cargo run --quiet --release -- --test)"
          exit_code=$?

          if [[ $exit_code -eq 0 && "$test_stdout" == *"success"* ]]; then
            echo "Binary execution tests passed"
          else
            echo "Binary execution tests failed with exit code $exit_code" >&2
            echo "Test output: $test_stdout" >&2
            exit $exit_code
          fi

      - name: Test `set_env=false`
        id: set-env-false
        uses: ./
        with:
          access_token: ${{ secrets.TEST_SM_ACCESS_TOKEN }}
          base_url: "https://vault.euqa.bitwarden.pw"
          set_env: false
          secrets: |
            e9ce5e83-d5b9-46d8-91e8-b1e54d8a52d8 > SECRET_NO_ENV_ONE
            1e12e623-d4ce-43d2-a3d3-07918217d280 > SECRET_NO_ENV_TWO

      - name: Ensure that `set_env=false` works correctly
        run: |
          echo set_env is false, so secrets should not be in env:
          if [ -n "$SECRET_NO_ENV_ONE" ] || [ -n "$SECRET_NO_ENV_TWO" ]; then
            echo "Secrets found in environment variables, but set_env is false" >&2
            exit 1
          else
            echo "No secrets found in environment variables, as expected"
          fi
          echo

          echo printing unmasked secrets with spaces between each character from GITHUB_OUTPUT:
          echo "${{ steps.set-env-false.outputs.SECRET_NO_ENV_ONE }}" | sed 's/./& /g'
          echo "${{ steps.set-env-false.outputs.SECRET_NO_ENV_TWO }}" | sed 's/./& /g'
          echo

      - name: Run the Rust Action
        id: rust-action
        uses: ./
        with:
          access_token: ${{ secrets.TEST_SM_ACCESS_TOKEN }}
          base_url: "https://vault.euqa.bitwarden.pw"
          secrets: |
            e9ce5e83-d5b9-46d8-91e8-b1e54d8a52d8 > SECRET_ONE
            1e12e623-d4ce-43d2-a3d3-07918217d280 > SECRET_TWO

      - name: Print Output from Rust sm-action
        run: |
          echo the following secrets should be masked:
          echo "SECRET_ONE=$SECRET_ONE"
          echo "SECRET_TWO=$SECRET_TWO"
          echo

          echo the following should be unmasked secret values with spaces between each character:
          echo "$SECRET_ONE" | sed 's/./& /g'
          echo "$SECRET_TWO" | sed 's/./& /g'
          echo

      - name: Test existing sm-action
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }} # existing action does not support aarch64 linux
        id: sm-action
        uses: bitwarden/sm-action@14f92f1d294ae3c2b6a3845d389cd2c318b0dfd8 # v2.2.0
        with:
          access_token: ${{ secrets.TEST_SM_ACCESS_TOKEN }}
          base_url: "https://vault.euqa.bitwarden.pw"
          secrets: |
            e9ce5e83-d5b9-46d8-91e8-b1e54d8a52d8 > SECRET_ONE
            1e12e623-d4ce-43d2-a3d3-07918217d280 > SECRET_TWO

      - name: Print Output from existing sm-action
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }} # existing action does not support aarch64 linux
        run: |
          echo the following secrets should be masked:
          echo "SECRET_ONE=$SECRET_ONE"
          echo "SECRET_TWO=$SECRET_TWO"
          echo

          echo the following should be unmasked secret values with spaces between each character:
          echo "$SECRET_ONE" | sed 's/./& /g'
          echo "$SECRET_TWO" | sed 's/./& /g'
          echo

      - name: Compare GITHUB_OUTPUT values from both actions
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }} # existing action does not support aarch64 linux
        run: |
          if [ "${{ steps.rust-action.outputs.SECRET_ONE }}" != "${{ steps.sm-action.outputs.SECRET_ONE }}" ]; then
            echo "SECRET_ONE does not match between sm-action and existing sm-action" >&2
            exit 1
          fi
          if [ "${{ steps.rust-action.outputs.SECRET_TWO }}" != "${{ steps.sm-action.outputs.SECRET_TWO }}" ]; then
            echo "SECRET_TWO does not match between sm-action and existing sm-action" >&2
            exit 1
          fi
          echo "All outputs match between sm-action and existing sm-action"

      - name: Prepare build artifacts
        run: |
          echo renaming files to:
          for target in ${{ join(matrix.targets, ' ') }}; do
            ext=""
            if [[ "$target" == *"windows"* ]]; then
              ext=".exe"
            fi
            mv "target/$target/release/sm-action$ext" "sm-action-$target$ext"
            echo "sm-action-$target$ext"
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: sm-action-${{ matrix.os }}-${{ github.sha }}
          path: sm-action-*
          retention-days: 30

  test:
    name: Test build artifacts
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact
        with:
          name: sm-action-ubuntu-latest-${{ needs.build.outputs.github_sha }}
